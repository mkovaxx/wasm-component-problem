// Generated by `wit-bindgen` 0.20.0. DO NOT EDIT!
// Options used:
pub mod example {
    pub mod types {

        #[allow(clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            #[derive(Clone, Copy)]
            pub enum Ast {
                Empty,
            }
            impl ::core::fmt::Debug for Ast {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Ast::Empty => f.debug_tuple("Ast::Empty").finish(),
                    }
                }
            }
        }
    }
}
pub mod exports {
    pub mod example {
        pub mod parser {

            #[allow(clippy::all)]
            pub mod parsing {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Ast = super::super::super::super::example::types::types::Ast;

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_parse_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> i32 {
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::parse(_rt::string_lift(bytes0));
                    use super::super::super::super::example::types::types::Ast as V2;
                    let result3 = match result1 {
                        V2::Empty => 0i32,
                    };
                    result3
                }
                pub trait Guest {
                    /// Parse the source of a module into an AST
                    fn parse(source: _rt::String) -> Ast;
                }
                #[doc(hidden)]

                macro_rules! __export_example_parser_parsing_0_1_0_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


          #[export_name = "example:parser/parsing@0.1.0#parse"]
          unsafe extern "C" fn export_parse(arg0: *mut u8,arg1: usize,) -> i32 {
            $($path_to_types)*::_export_parse_cabi::<$ty>(arg0, arg1)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_example_parser_parsing_0_1_0_cabi;
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::string::String;
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_parser_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::example::parser::parsing::__export_example_parser_parsing_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::example::parser::parsing);
  )
}
#[doc(inline)]
pub(crate) use __export_parser_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.20.0:parser:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 320] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc3\x01\x01A\x02\x01\
A\x05\x01B\x04\x01q\x01\x05empty\0\0\x04\0\x03ast\x03\0\0\x01q\x01\x05empty\0\0\x04\
\0\x06module\x03\0\x02\x03\x01\x19example:types/types@0.1.0\x05\0\x02\x03\0\0\x03\
ast\x01B\x04\x02\x03\x02\x01\x01\x04\0\x03ast\x03\0\0\x01@\x01\x06sources\0\x01\x04\
\0\x05parse\x01\x02\x04\x01\x1cexample:parser/parsing@0.1.0\x05\x02\x04\x01\x1be\
xample:parser/parser@0.1.0\x04\0\x0b\x0c\x01\0\x06parser\x03\0\0\0G\x09producers\
\x01\x0cprocessed-by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.20\
.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
